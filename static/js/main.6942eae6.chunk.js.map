{"version":3,"sources":["components/Player/Player.js","axios.js","data/actions/api.js","data/actions/state.js","components/Player/Player1.js","components/Player/Player2.js","components/Header/Header.js","components/Header/index.js","components/Result/Result.js","components/Result/index.js","components/GameStart/GameStart.js","components/GameStart/index.js","components/Loading/Loading.js","components/Loading/index.js","components/App.js","data/initial.js","data/reducer.js","data/store.js","index.js"],"names":["Player","score","handleIncrement","serving","number","winner","defaultLang","playerName","gameStarted","className","player","onClick","axios","create","baseURL","params","key","headers","Accept","patchIncrementPlayer","dispatch","getState","id","gameId","patch","then","data","player_1","player_2","type","player1","player2","serve","won","incrementPlayer","getPrevGames","get","prevGames","filter","game","complete","map","player1Name","name","player2Name","previous","loaded","connect","english","esperanto","Header","handleClick","handleCheckUnfinished","checkedUnfinished","unfinished","handleChooseGame","pingPong","Button","Table","style","backgroundColor","color","winScore","margin","variant","state","unfinishedGames","winning_score","loadedUnfinished","alternate","chooseGame","Result","handleReset","handleDelete","handleLoad","wins","reset","textAlign","history","striped","bordered","hover","magin","current","index","src","alt","delete","GameStart","props","handleName1Change","bind","handleName2Change","handleWinScoreChange","handleAltChange","handleSubmit","e","this","setState","currentTarget","value","preventDefault","handleSave","onSubmit","padding","InputGroup","FormControl","onChange","winningScore","alternateEvery","Component","settings","post","change_serve","saveSettings","postGame","Loading","children","width","App","Player1","Player2","initial","reducer","action","increment","deleted","langToggle","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6942eae6.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Player = ({ score, handleIncrement, serving, number, winner, defaultLang, playerName, gameStarted }) => (\n    gameStarted ? (\n    <div \n        className={\"col-md-6 mt-4 card text-center \" + (serving === number ? \"bg-dark text-white\" : null )}\n    >\n        <h5 className=\"card-header\">\n            { playerName !== \"\" ? playerName : `${defaultLang.player} ${number}`}\n        </h5>\n        <div className=\"card-body\">\n            <p className=\"card-text display-1\">{ score }</p>\n        </div>\n\n        { winner !== 0 ? null : \n            <div className=\"card-footer\">\n                <button \n                    className=\"form-control btn btn-success\" \n                    onClick={ handleIncrement }\n                >+</button>\n            </div> \n        }\n    </div>\n    ) : null\n);\n\nexport default Player;","// import the library version of axios\nimport axios from \"axios\";\n\n// create a version of axios with useful defaults\nexport default axios.create({\n    // use your own url\n    baseURL: \"http://ellieellie.restful.training/api/ping-pong\",\n\n    // use your own key\n    params: {\n        key: \"d72883032dcdbd70c81d333d50ed5580050b7842\",\n    },\n\n    // make sure we get JSON back\n    headers: {\n        Accept: \"application/json\",\n    },\n});","import axios from \"../../axios\";\nimport { saveSettings, incrementPlayer, loaded, deleted, loadedUnfinished } from \"./state\";\n\nexport const postGame = ({ player1Name, player2Name, alternate, winScore }) => dispatch => {\n    axios.post(\"/games\", {\n        player_1: player1Name,\n        player_2: player2Name,\n        winning_score: winScore,\n        change_serve: alternate,\n    }).then(({ data }) => {\n        dispatch(saveSettings(data.data))\n    });\n};\n\nexport const patchIncrementPlayer = player => (dispatch, getState) => {\n    const id = getState().gameId;\n\n    axios.patch(`/games/${id}/score`, {\n        player: player\n    }).then(({ data }) => {\n        dispatch(incrementPlayer(data.data))\n    });\n}\n\nexport const getPrevGames = () => dispatch => {\n    axios.get(\"/games\").then(({ data }) => {\n        let completedGames = data.data.filter(game => game.complete);\n\n        let prevGames = completedGames.map(\n            game => ({\n                player1Name: game.player_1.name, \n                player2Name: game.player_2.name,\n                winner: game.player_1.won ? 1 : (game.player_2.won ? 2 : 0),\n                player1: game.player_1.score,\n                player2: game.player_2.score,\n                gameId: game.id,\n            })\n        )\n        dispatch(loaded(prevGames));\n    }); \n};\n\nexport const deleteGame = (id) => dispatch => {\n    axios.delete(`/games/${id}`).then(() => {\n        dispatch(deleted());\n    }); \n};\n\nexport const checkUnfinished = () => dispatch => {\n    axios.get(\"/games\").then(({ data }) => {\n        let unfinishedGames = data.data.filter(game => !game.complete);\n        \n        unfinishedGames = unfinishedGames.map(\n            game => ({\n                player1Name: game.player_1.name, \n                player2Name: game.player_2.name,\n                winner: game.player_1.won ? 1 : (game.player_2.won ? 2 : 0),\n                player1: game.player_1.score,\n                player2: game.player_2.score,\n                gameId: game.id,\n                winScore: game.winning_score,\n                serve: game.player_1.serving ? 1 : 2,\n            })\n        )\n\n        dispatch(loadedUnfinished(unfinishedGames));\n    }); \n};\n\n\n","export const chooseGame = ({gameId, player1Name, player1, player2, winScore, player2Name, serve, alternate}) => ({\n    type: \"chooseGame\",\n    gameId,\n    player1Name,\n    player1, \n    player2,\n    player2Name,\n    winScore,\n    serve,\n    alternate,\n});\n\nexport const incrementPlayer = ({ player_1, player_2 }) => ({\n    type: 'incrementPlayer',\n    player1: player_1.score,\n    player2: player_2.score,\n    serve: player_1.serving ? 1 : 2,\n    winner: player_1.won ? 1 : (player_2.won ? 2 : 0),\n})\n\nexport const reset = () => ({\n    type: \"reset\"\n})\n\nexport const langToggle = () => ({\n    type: \"langToggle\"\n})\n\nexport const saveSettings = ({ player_1, player_2, change_serve, winning_score, id }) => ({ \n    type: \"saveSettings\",\n    player1Name: player_1.name,\n    player2Name: player_2.name, \n    alternate: change_serve,\n    winScore: winning_score,\n    gameId: id\n})\n\nexport const loadedUnfinished = (unfinishedGames) => ({\n    type: \"loadedUnfinished\",\n    unfinished: unfinishedGames\n})\n\nexport const loaded = (prevGames) => ({\n    type: \"loaded\",\n    previous: prevGames,\n})\n\nexport const deleted = () => ({\n    type: \"deleted\",\n})","import { connect } from \"react-redux\";\nimport Player from \"./Player\";\nimport { patchIncrementPlayer } from \"../../data/actions/api\"\nimport { english, esperanto } from \"../../data/languages\"\n\nconst mapStateToProps = ({ player1, serve, winner, player1Name, gameStarted, defaultLang }) => {\n  return {\n    score: player1,\n    number: 1,\n    serving: serve,\n    winner,\n    defaultLang: defaultLang ? english : esperanto,\n    playerName: player1Name,\n    gameStarted,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    handleIncrement: () => dispatch(patchIncrementPlayer(1)),\n  }; \n};\n\n  \nexport default connect(mapStateToProps, mapDispatchToProps)(Player);","import { connect } from \"react-redux\";\nimport Player from \"./Player\";\nimport { patchIncrementPlayer } from \"../../data/actions/api\"\nimport { english, esperanto } from \"../../data/languages\"\n\nconst mapStateToProps = ({ player2, serve, winner, player2Name, gameStarted, defaultLang }) => {\n  return {\n    score: player2,\n    number: 2,\n    serving: serve,\n    winner,\n    defaultLang: defaultLang ? english : esperanto,\n    playerName: player2Name,\n    gameStarted,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    handleIncrement: () => dispatch(patchIncrementPlayer(2)),\n  };\n};\n  \nexport default connect(mapStateToProps, mapDispatchToProps)(Player);","import React from \"react\";\nimport { Button, Table } from \"react-bootstrap\";\nimport { english, esperanto } from \"../../data/languages\";\n\nconst Header = ({ handleClick, defaultLang, handleCheckUnfinished, checkedUnfinished, unfinished, handleChooseGame }) => (\n    <header className=\"jumbotron mt-4 mb-0\">\n        <h1>{ defaultLang.pingPong }</h1>\n        <Button\n            onClick={ handleCheckUnfinished }\n        >Check for unfinished games?</Button>\n        <Table>\n            <tbody>\n            { !checkedUnfinished ? null : \n                unfinished.map(game => {\n                    return (\n                    <>\n                    <tr key=\"index\">\n                        <td onClick={ () => handleChooseGame(game) } style={{ backgroundColor: \"black\", color: \"white\" }}> Game { game.gameId }<strong>\n                        \n                        </strong>\n                        </td>\n                        <td style={{ backgroundColor: \"black\", color: \"white\" }}><strong>Winning Score: { game.winScore }</strong></td>\n                    </tr>\n                    <tr>\n                        <td>{ game.player1Name }</td> \n                        <td>{ game.player2Name }</td>\n                    </tr>\n                     <tr>\n                        <td>{ game.player1 }</td> \n                        <td>{ game.player2 }</td>\n                    </tr>\n                    </>\n                )})\n            }\n            </tbody>\n        </Table>\n            <Button \n                style={{margin: \"0 auto\"}}\n                variant={ defaultLang === english ? \"danger\" : \"primary\" }\n                onClick={ handleClick }>English</Button>\n            <Button \n                variant={ defaultLang === esperanto? \"danger\" : \"primary\" }\n                onClick={ handleClick }\n            >Esperanto</Button>\n    </header>\n);\n\nexport default Header;","import { connect } from \"react-redux\";\nimport Header from \"./Header\";\nimport { langToggle, chooseGame } from \"../../data/actions/state\"\nimport { checkUnfinished } from \"../../data/actions/api\"\nimport { english, esperanto } from \"../../data/languages\"\n\nconst mapStateToProps = state => {\n  return {\n    defaultLang: state.defaultLang ? english : esperanto,\n    gameId: state.gameId,\n    checkedUnfinished: state.checkedUnfinished,\n    unfinished: state.unfinished,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    handleClick: () => dispatch(langToggle()),\n    handleCheckUnfinished: () => dispatch(checkUnfinished()),\n    handleChooseGame: (game) => dispatch(chooseGame(game)),\n\n  }; \n};\n  \nexport default connect(mapStateToProps, mapDispatchToProps)(Header);","import React from \"react\";\nimport { Table } from \"react-bootstrap\";\n\nconst Result = ({ winner, handleReset, previous, defaultLang, player1Name, player2Name, handleDelete, handleLoad }) => (\n    <>\n        { winner > 0 ? \n        <h2 className=\"alert alert-success\">\n        { \n            (winner === 1 ? (player1Name ? player1Name : `${defaultLang.player} 1 ` ) :  (player2Name ? player2Name : `${defaultLang.player} 2 ` )) + ` ${defaultLang.wins}`\n        }\n       \n        </h2>\n        : null } \n\n        <hr/>\n        \n        <button className=\"btn btn-danger\" onClick={ handleReset }>{ defaultLang.reset }</button>\n\n        <button className=\"btn btn-primary\" onClick={ handleLoad }> Reload History</button>\n\n\n        <hr/>\n        <div className=\"card\">\n\n            <h2 style={{textAlign: \"center\"}}>{ defaultLang.history }</h2>\n            <Table striped bordered hover style={{magin: 10}}>\n                <thead>\n                    <tr>\n                        <th style={{textAlign: \"center\"}}>{ player1Name !== \"\" ? player1Name : `${defaultLang.player} 1`}</th>\n                        <th style={{textAlign: \"center\"}}>{ player2Name !== \"\" ? player2Name : `${defaultLang.player} 2`}</th>\n                    </tr>\n                </thead>\n                <tbody>\n                { previous.map((current, index) =>  (\n                <>\n                    <tr style={{backgroundColor: \"black\", color: \"white\"}} key={index}>\n                        \n                        <td>{ current.player1Name }</td>\n                        <td>{ current.player2Name }</td>\n                        <td>Delete game</td>\n                    </tr>\n                    <tr key={ current.id }>\n                      \n                        <td style={{ backgroundColor: current.winner === 1 ? \"lightgreen\" : \"indianred\" }} >{ current.player1 }</td>\n                        <td style={{ backgroundColor: current.winner === 2 ? \"lightgreen\" : \"indianred\" }} >{ current.player2 }</td>\n                        <td>\n                            <img \n                                id={ current.id }\n                                src=\"./delete.svg\" \n                                alt=\"delete icon\"\n                                onClick={() => handleDelete(current.gameId)}\n                            />\n                        </td>\n                    </tr>\n                    </>\n                ))}\n                </tbody>\n        </Table>\n       </div>\n    </>\n);\n\nexport default Result;","import { connect } from \"react-redux\";\nimport Result from \"./Result\";\nimport { reset } from \"../../data/actions/state\"\nimport { deleteGame, getPrevGames } from \"../../data/actions/api\"\n\nimport { english, esperanto } from \"../../data/languages\"\n\nconst mapStateToProps = state => {\n  return {\n    player1: state.player1,\n    player1Name: state.player1Name,\n    player2: state.player2,\n    player2Name: state.player2Name,\n    winner: state.winner,\n    previous: state.previous,\n    defaultLang: state.defaultLang ? english : esperanto,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    handleReset: () => dispatch(reset()),\n    handleDelete: (gameId) => dispatch(deleteGame(gameId)),\n    handleLoad: () => dispatch(getPrevGames()),\n  }; \n};\n  \nexport default connect(mapStateToProps, mapDispatchToProps)(Result);","import React, { Component } from 'react';\nimport { FormControl, InputGroup, Button } from \"react-bootstrap\";\nimport { esperanto, english } from \"../../data/languages\"\n\nclass GameStart extends Component {\n    //constructor should always contain props and superprops\n    constructor(props){\n        super(props);\n        \n        this.state = {\n            player1Name: this.props.player1Name,\n            player2Name: this.props.player2Name,\n            winScore: this.props.winScore,\n            alternate: this.props.alternate,\n        }\n\n        this.handleName1Change = this.handleName1Change.bind(this);\n        this.handleName2Change = this.handleName2Change.bind(this);\n        this.handleWinScoreChange = this.handleWinScoreChange.bind(this);\n        this.handleAltChange = this.handleAltChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleName1Change(e){\n        this.setState({ \n            player1Name: e.currentTarget.value, \n        });\n    }\n\n    handleName2Change(e){\n        this.setState({ \n            player2Name: e.currentTarget.value,\n        });\n    }\n\n    handleWinScoreChange(e){\n        this.setState({ \n            winScore: e.currentTarget.value,\n        });\n    }\n\n    handleAltChange(e){\n        this.setState({ \n            alternate: e.currentTarget.value,\n        });\n    }\n\n    handleSubmit(e){\n        e.preventDefault();\n        this.props.handleSave({...this.state});\n    }\n\n    render() {\n        let { player1Name, player2Name, winScore, alternate } = this.state;\n        let { defaultLang, gameStarted } = this.props;\n\n        return (\n            gameStarted ? null : ( \n            <form \n                onSubmit={ this.handleSubmit }\n                className=\"card\" style={{ padding: 20, margin: 20 }}\n            >\n            <InputGroup>\n                <label>\n                    { defaultLang ? `${english.player} 1 ${english.name}` : `${esperanto.player} 1 ${esperanto.name}` }\n                </label>\n\n                <FormControl  \n                    type=\"text\"\n                    onChange={ this.handleName1Change }\n                    value={ player1Name }\n                />  \n            </InputGroup>\n            <InputGroup>\n                <label>\n                    { defaultLang ? `${english.player} 2 ${english.name}` : `${esperanto.player} 2 ${esperanto.name}` }\n                </label>\n\n                <FormControl  \n                    type=\"text\"\n                    onChange={ this.handleName2Change }\n                    value={ player2Name }\n                />  \n            </InputGroup>\n            <InputGroup>\n                <label>\n                    { defaultLang ? english.winningScore : esperanto.winningScore }\n                </label>\n\n                <FormControl  \n                    type=\"number\"\n                    onChange={ this.handleWinScoreChange }\n                    value={ winScore }\n                />  \n               \n            </InputGroup>\n            <InputGroup>\n                <label>\n                    { defaultLang ? english.alternateEvery : esperanto.alternateEvery }\n                </label>\n\n                <FormControl  \n                    type=\"number\"\n                    onChange={ this.handleAltChange }\n                    value={ alternate }\n                />  \n               \n            </InputGroup>\n            <Button \n                type=\"submit\"\n            >Save Settings </Button>\n            </form>\n            )\n        )\n    }\n}\n\nexport default GameStart;","import { connect } from \"react-redux\";\nimport GameStart from \"./GameStart\";\nimport { postGame } from \"../../data/actions/api\"\nimport { english, esperanto } from \"../../data/languages\"\n\n\nconst mapStateToProps = state => {\n    return {\n        defaultLang: state.defaultLang ? english : esperanto,\n        alternate: state.alternate,\n        winScore: state.winScore,\n        player1Name: state.player1Name,\n        player2Name: state.player2Name,\n        gameStarted: state.gameStarted,\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleSave: settings => dispatch(postGame(settings))\n    };\n};\n  \n\n  \nexport default connect(mapStateToProps, mapDispatchToProps)(GameStart);","import React, { Component } from \"react\";\n\nclass Loading extends Component {\n    componentDidMount() {\n        if (!this.props.loaded) {\n            this.props.handleLoad();\n        }\n    }\n    \n  render() {\n    const { children, loaded } = this.props;\n    return loaded ? children : (\n      <div className=\"progress\">\n        <div\n          className=\"progress-bar progress-bar-striped active\"\n          style={{ width: \"100%\" }}\n/> </div>\n); }\n}\nexport default Loading;","import { connect } from \"react-redux\";\nimport Loading from \"./Loading\";\nimport { getPrevGames } from \"../../data/actions/api\"\n\nconst mapStateToProps = ({ loaded }) => ({\n    loaded,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    handleLoad: () => dispatch(getPrevGames()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Loading);","import React from \"react\";\nimport Player1 from \"./Player/Player1\";\nimport Player2 from \"./Player/Player2\";\nimport Header from \"./Header\"\nimport Result from \"./Result\";\nimport GameStart from \"./GameStart\";\nimport Loading from \"./Loading\";\n\nconst App = () => (\n    <>\n        <Header />\n        <GameStart/>\n        <Loading>\n        <div className=\"row md-6\" style={{ padding: 15 }}>\n            <Player1/>\n            <Player2/>\n        </div>\n        </Loading>\n        <hr/>\n        <Loading>\n            <Result/>\n        </Loading>\n    </>\n);\n\nexport default App;","const initial = {\n    player1: 0,\n    player1Name: \"\",\n    player2: 0,\n    player2Name: \"\",\n    serve: 0,\n    winner: 0,\n    previous: [],\n    defaultLang: true,\n    winScore: 21,\n    alternate: 5,\n    gameStarted: false,\n    gameId: 1,\n    loaded: false,\n    unfinished: [],\n    checkedUnfinished: false,\n};\n\nexport default initial;","import initial from \"./initial\";\n\nconst reducer = (state, action) => {\n\n    const loadedUnfinished = (state, { unfinished }) => ({\n        ...state,\n        unfinished: unfinished,\n        loaded: true,\n        checkedUnfinished: !state.checkedUnfinished,\n    })\n    \n    const chooseGame = (state, { gameId, player1, player2, player1Name, player2Name, winScore, alternate, serve }) => ({\n        ...state,\n        gameId,\n        player1Name,\n        player1,\n        player2,\n        player2Name,\n        winScore, \n        alternate,\n        serve,\n        checkedUnfinished: false,\n        gameStarted: true,\n    })\n        \n    const deleted = state => ({\n        ...state,\n    })\n\n    const increment = (state, { player1, player2, serve, winner }) => ({\n        ...state, \n        player1,\n        player2,\n        serve,\n        winner,\n    })\n\n    const saveSettings = (state, { player1Name, player2Name, alternate, winScore, gameId }) => ({ \n        ...state, \n        player1Name,\n        player2Name,\n        alternate,\n        winScore,\n        gameStarted: true,\n        gameId,\n    });\n\n    const loaded = (state, { previous }) => ({\n        ...state,\n        previous: previous,\n        loaded: true\n    })\n\n    const langToggle = state => ({ \n        ...state, \n        defaultLang: !state.defaultLang, \n    }) \n\n    const reset = ({ defaultLang, player1Name, loaded, player2Name, previous }) => ({\n        ...initial, \n        loaded,\n        defaultLang,\n        gameStarted: false,\n        player1Name,\n        player2Name,\n        previous,\n        gameId: 0\n    })\n \n   switch (action.type) {\n    case \"incrementPlayer\": return increment(state, action);\n    case \"reset\": return reset(state);\n    case \"deleted\": return deleted(state);\n    case \"loaded\": return loaded(state, action);\n    case \"loadedUnfinished\": return loadedUnfinished(state, action);\n    case \"chooseGame\": return chooseGame(state, action);\n    case \"langToggle\": return langToggle(state, action);\n    case \"saveSettings\": return saveSettings(state, action);\n\n    default: return state;\n } };\n\n export default reducer;","import { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport initial from \"./initial\";\nimport reducer from \"./reducer\";\n\nconst composeEnhancers =\nwindow.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n    reducer,\n    initial,\n    composeEnhancers(applyMiddleware(thunk))\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport { Provider } from \"react-redux\";\nimport store from \"./data/store\";\n \n// let state = store.getState();\n\nReactDOM.render(\n  <Provider store={ store }>\n    <App/>,\n  </Provider>,\ndocument.getElementById(\"root\")\n); \n\n  \n"],"sourceRoot":""}